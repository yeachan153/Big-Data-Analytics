tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), remove = TRUE)
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"), remove = TRUE)
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"),
remove = TRUE)
a = rnorm(500)
a %>%
ggplot(aes(a)) +
geom_histogram()
a %>%
ggplot(aes(a)) +
freq_poly()
# Extract can be more powerful with regex:
tibble(x = c("X1", "X20", "AA11", "AA2")) %>%
extract(x, c("variable", "id"), regex = "([A-Z]+)([0-9]+)")
?extract
# Extract can be more powerful with regex:
tibble(x = c("X1", "X20", "AA11", "AA2")) %>%
extract(x, c("variable", "id"), regex = "([A-Z]+)([0-9]+)")
# Extract can be more powerful with regex:
tibble(x = c("X1", "X20", "AA11", "AA2")) %>%
extract(x,
into = c("variable", "id"),
regex = "([A-Z]+)([0-9]+)")
?unite
# Unite combines 2 columns into 1. Default sep is _.
table5 %>%
unite(new,
sep = ""
century,
year)
# Unite combines 2 columns into 1. Default sep is _.
table5 %>%
unite(new,
sep = "",
century,
year)
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks
?spread
stocks %>%
spread(key = year, value = return)
stocks %>%
spread(key = year,
value = return) %>%
gather(`2015`:`2016`,
key = year,
value = return)
stocks %>%
spread(key = year,
value = return) %>%
gather(`2015`:`2016`,
key = year,
value = return,
na.rm = TRUE)
stocks
# Checking for NA values
stocks %>%
spread(key = year,
value = return)
stocks %>%
complete(year, qtr)
stocks
# complete() takes a set of columns, and finds all unique combinations. It then ensures the original dataset contains
# all those values, filling in explicit NAs where necessary.
stocks %>%
complete(year, qtr)
# Filling in missing values with the last non-missing value
treatment <- tribble(
~ person,           ~ treatment, ~response,
"Derrick Whitmore", 1,           7,
NA,                 2,           10,
NA,                 3,           9,
"Katherine Burke",  1,           4
)
treatment
treatment %>%
fill(person)
?fill
treatment %>%
fill(person,
direction = "down")
treatment %>%
fill(person,
direction = c("down"))
treatment %>%
fill(person,
direction = c("down", "up"))
treatment %>%
fill(person)
treatment %>%
fill(person, direction = "up")
treatment %>%
fill(person, direction = c("up"))
who
who %>%
gather(new_sp_m014:newrel_f65, key = "key", value = cases)
who %>%
gather(new_sp_m014:newrel_f65, key = key, value = cases)
who %>%
gather(new_sp_m014:newrel_f65, key = key, value = cases, na.rm = TRUE)
who %>%
gather(new_sp_m014:newrel_f65, key = key, value = cases, na.rm = TRUE)
who1 %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who1 <- who %>%
gather(new_sp_m014:newrel_f65, key = "key", value = "cases", na.rm = TRUE)
who1
who1 %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who1 %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who1 <- who %>%
gather(new_sp_m014:newrel_f65, key = "key", value = "cases", na.rm = TRUE)
who1 %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who1 %>%
mutate(key = str_replace(key, "newrel", "new_rel"))
?str_replace
library(tidyverse)
library(nycflights13)
weatjer
weather
count(year, month, day, hour, origin)
weather %>%
count(year, month, day, hour, origin)
weather %>%
count(year, month, day, hour)
weather %>%
count(year, month, day)
, hour
weather %>%
count(year, month, day, hour)
weather %>%
count(year, month, day, hour, origin)
library(MASS)
library(ISLR)
install.packages('ISLR')
#### Simple linear regression
names(Boston)
library(tidyverse)
#### Simple linear regression
Boston
#### Simple linear regression
as.tibble(Boston)
#### Simple linear regression
Boston = as.tibble(Boston)
Boston
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point()
?Boston
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point()
?Boston
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point()
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point()
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point()
# Fit a linear model
fit1 = lm(medv ~ lstat, data = Boston)
fit1
fit1
summary(fit)
summary(fit1)
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm")
names(fit1)
confint(fit1)
# We can also predict data based on our model
data = tribble(
~lstat
/-----
5,
10,
15)
# We can also predict data based on our model
data = tribble(
~lstat,
/-----
5,
10,
15)
# We can also predict data based on our model
data = tribble(
~lstat,
#/-----
5,
10,
15)
data
# We can also predict data based on our model
lstat = tribble(
~lstat,
#/-----
5,
10,
15)
lstat
predict(fit1, lstat)
predict(fit1, lstat, interval = "confidence")
fit2 = lm(medv ~ lstat + age, data = Boston)
summary(fit2)
fit3 = lm(medv ~., data = Boston)
fit3
summary(fit3)
plot(fit3)
# We can use this to create subplots
par(mfrow = c(2,2))
plot(fit3)
# We can "update" a model using the update function. ~ here means we use the same target
# and the . indicates all features we used in fit3. -age-indus indicates we remove these features
fit4 = update(fit3, ~.-age-indus)
fit3
# We can "update" a model using the update function. ~ here means we use the same target
# and the . indicates all features we used in fit3. -age-indus indicates we remove these features
fit4 = update(fit3, ~.-age-indus)
summmary(fit4)
summary(fit4)
fit5 = lm(medv ~ lstat*age, Boston)
summary(fit5)
fit6 = lm(medv ~ lstat + I(lstat**2))
fit6 = lm(medv ~ lstat + I(lstat**2))
fit6 = lm(medv ~ lstat + I(lstat**2), Boston)
summary(fit6)
fit6 = lm(medv ~ lstat + lstat**2, Boston)
summary(fit6)
# We have to use square lstat within an identity function I(), because otherwise the formula
# doesn't udnerstand properly.
fit6 = lm(medv ~ lstat + I(lstat**2), Boston)
summary(fit6)
summary(fit6)
Boston
crim
#####################################################################################################################
par(mfrow = c(1,1))
attach(Boston)
lsts
lstat
medv
fitted(fit6)
ggplot(mapping = aes(y = medv, x = lstat)) +
geom_point()
#### Simple linear regression
Boston = as.tibble(Boston)
attach(Boston)
lstat
rm(list = ls())
library(MASS)
library(ISLR)
library(tidyverse)
#### Simple linear regression
Boston = as.tibble(Boston)
attach(Boston)
ggplot(mapping = aes(y = medv, x = lstat)) +
geom_point()
Boston %>%
ggplot(mapping = aes(y = medv, x = lstat)) +
geom_point()
Boston %>%
ggplot(mapping = aes(y = medv, x = lstat)) +
geom_point()
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv))
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point()
rm(list = ls())
library(MASS)
library(ISLR)
library(tidyverse)
#### Simple linear regression
Boston = as.tibble(Boston)
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point()
dev.off()
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point()
# We have to use square lstat within an identity function I(), because otherwise the formula
# doesn't udnerstand properly.
fit6 = lm(medv ~ lstat + I(lstat**2), Boston)
summary(fit6)
fitted(fit6)
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(mapping = aes(fitted(fit6)))
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm",
formula = medv ~
lstat + I(lstat**2))
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm",
formula = medv ~ lstat + I(lstat**2))
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm",
formula = medv ~  I(lstat**2))
fitted(model6)
fitted(fit6)
fitted = fitted(fit6)
fitted(fit6)
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point(color = "Red", alpha = .5)
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point(color = "Red", alpha = .2)
head(fitted)
head(fitted,20)
# Fit the model
fit1 = lm(medv ~ lstat, data = Boston)
# Get basic info
fit1
# get summary values
summary(fit1)
# Get names of available methods
names(fit1)
# Get confidence intervals of coefficients
confint(fit1)
# We can also predict data based on our model
lstat = tribble(
~lstat,
#/-----
5,
10,
15)
# Get predictions for new values of lstat with confidence intervals
predict(fit1, lstat, interval = "confidence")
car
cars
fitted
Boston %>%
select(lstat,
medv) %>%
cbind(fit6)
selected =
Boston %>%
select(lstat,
medv)
cbind(selected, fitted)
df = cbind(selected, fitted)
fitted_df = cbind(selected, fitted)
as.tibble(fitted_df)
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point(color = "Red", alpha = .2) +
geom_line(color = "Black",
data = fitted_df,
mapping = aes(x = lstat, y = fitted))
# An easy way to fit polynomials is to use the "poly" function
fit7 = lm(medv~poly(lstat,4))
lstat
# An easy way to fit polynomials is to use the "poly" function
fit7 = lm(medv~poly(lstat,4), data = Boston)
fit7
selected2 =
Boston %>%
select(lstat,
medv)
fitted2 = fitted(fit7)
fitted_df2 = cbind(selected2, fitted23)
fitted_df2 = cbind(selected2, fitted2)
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point(color = "Red", alpha = .2) +
geom_line(color = "Black",
data = fitted_df,
mapping = aes(x = lstat, y = fitted)) +
geom_line(color = "Blue",
data = fitted_df2,
mapping = aes(x = lstat, y = fitted))
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point(color = "Red", alpha = .2) +
geom_line(color = "Black",
data = fitted_df,
mapping = aes(x = lstat, y = fitted)) +
geom_line(color = "Blue",
data = fitted_df2,
mapping = aes(x = lstat, y = fitted))
as.tibble(fitted_df2)
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point(color = "Red", alpha = .2) +
geom_line(color = "Black",
data = fitted_df,
mapping = aes(x = lstat, y = fitted)) +
geom_line(color = "Blue",
data = fitted_df2,
mapping = aes(x = lstat, y = fitted2))
Boston %>%
ggplot(mapping = aes(x = lstat, y = medv)) +
geom_point(color = "Red", alpha = .2) +
geom_line(color = "Black",
data = fitted_df,
mapping = aes(x = lstat, y = fitted)) +
geom_line(color = "Green",
data = fitted_df2,
mapping = aes(x = lstat, y = fitted2))
summary(fit7)
##################################################################
# Qualitative data
fix
##################################################################
# Qualitative data
fix()
##################################################################
# Qualitative data
fix(Boston)
names(Boston)
colnames(Boston)
# Use fix() to edit data quickly
fix(Boston)
head(Boston)
# Use contrasts to see how dummy variables are coded
contrasts(Boston$crim)
str(Boston)
str(carseats)
str(Carseats)
# Use contrasts to see how dummy variables are coded
contrasts(Carseats$ShelveLoc)
# ... in functions allows us to pass in extra unnamed arguments
regplot = function(x,y,...) {
fit = lm(y ~ x)
plot(x,y,...)
abline(fit, col = "red")
}
regplot(Price, Sales,
xlab = "Price", ylab = "Sales")
# ... in functions allows us to pass in extra unnamed arguments
regplot = function(x,y,...) {
fit = lm(y ~ x)
plot(x,y,...)
abline(fit, col = "red")
}
regplot(Price, Sales,
xlab = "Price", ylab = "Sales")
attach(Carseats)
regplot(Price, Sales,
xlab = "Price", ylab = "Sales")
y=x
f=outer(x,y,function (x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour (x,y,f,nlevels =45,add=T)
fa=(f-t(f))/2
contour (x,y,fa,nlevels =15)
x=seq(1,10)
y=x
f=outer(x,y,function (x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour (x,y,f,nlevels =45,add=T)
fa=(f-t(f))/2
contour (x,y,fa,nlevels =15)
training_Data
training_data
# Make sure to change this
setwd("/home/yeachan153/Desktop/BDS/R/Big Data Analytics/Big-Data-Analytics/Text Analytics Project")
library(tidyverse)
"
Read in the CSV file
"
personality = as.tibble(read.csv("youtube-personality/YouTube-Personality-Personality_impression_scores_train.csv",
encoding = "UTF-8",
sep = " "))
gender = as.tibble(read.csv("youtube-personality/YouTube-Personality-gender.csv",
encoding = "UTF-8",
sep = " "))
audiovisual = as.tibble(read.csv("youtube-personality/YouTube-Personality-audiovisual_features.csv",
encoding = "UTF-8",
sep = " "))
transcripts = as.tibble(read.csv("youtube-personality/transcripts.csv",
encoding = "UTF-8",
sep = ","))
transcripts$index = as.character(transcripts$index)
transcripts =
transcripts %>%
rename(vlogId = index,
transcript = X0) %>%
mutate(vlogId = substr(vlogId, 1, nchar(vlogId)-4))
personality$vlogId = as.character(personality$vlogId)
gender$vlogId = as.character(gender$vlogId)
audiovisual$vlogId = as.character(audiovisual$vlogId)
training_data =
personality %>%
left_join(gender, on = c("vlogID" = "vlogID")) %>%
left_join(audiovisual, on = c("vlogID" = "vlogID")) %>%
left_join(transcripts, on = c("clogID" = "vlogID"))
training_data
